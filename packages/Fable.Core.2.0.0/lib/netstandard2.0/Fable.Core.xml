<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fable.Core</name></assembly>
<members>
<member name="T:Fable.Core.U8`8">
<summary>
 Erased union type to represent one of eight possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U7`7">
<summary>
 Erased union type to represent one of seven possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U6`6">
<summary>
 Erased union type to represent one of six possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U5`5">
<summary>
 Erased union type to represent one of five possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U4`4">
<summary>
 Erased union type to represent one of four possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U3`3">
<summary>
 Erased union type to represent one of three possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.U2`2">
<summary>
 Erased union type to represent one of two possible values.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.OverloadSuffixAttribute">
<summary>
 Intended for replacement types in Fable.Core.JS
</summary>
</member>
<member name="T:Fable.Core.ReplacesAttribute">
<summary>
 Intended for replacement types in Fable.Core.JS
</summary>
</member>
<member name="T:Fable.Core.InjectAttribute">
<summary>
 Experimental: Currently only intended for some specific libraries
</summary>
</member>
<member name="T:Fable.Core.ParamListAttribute">
<summary>
 Used to spread the last argument. Mainly intended for `React.createElement` binding, not for general use.
 Fable 1 only accepted lists, but Fable 2 accepts seq as well.
</summary>
</member>
<member name="T:Fable.Core.StringEnumAttribute">
<summary>
 Compile union types as string literals.
 More info: http://fable.io/docs/interacting.html#StringEnum-attribute
</summary>
</member>
<member name="T:Fable.Core.EmitAttribute">
<summary>
 Function calls will be replaced by inlined JS code.
 More info: http://fable.io/docs/interacting.html#Import-attribute
</summary>
</member>
<member name="T:Fable.Core.ImportAttribute">
<summary>
 References to the module, type, function... will be replaced by import statements.
 Use `[&lt;Import(&quot;default&quot;, &quot;my-package&quot;)&gt;] to import the default member.
 Use `[&lt;Import(&quot;*&quot;, &quot;my-package&quot;)&gt;] to import the whole package.
 More info: http://fable.io/docs/interacting.html#Import-attribute
</summary>
</member>
<member name="T:Fable.Core.GlobalAttribute">
<summary>
 The module, type, function... is globally accessible in JS.
 More info: http://fable.io/docs/interacting.html#Import-attribute
</summary>
</member>
<member name="T:Fable.Core.EraseAttribute">
<summary>
 Used for erased union types and to ignore modules in JS compilation.
 More info: http://fable.io/docs/interacting.html#Erase-attribute
</summary>
</member>
<member name="T:Fable.Core.Applicable">
<summary>
 Not used in Fable 2 but added temporarily to avoid errors when using dotnet CLI
 to build projects with dependencies referencing Fable.Core 1.x
</summary>
</member>
<member name="M:Fable.Core.Exceptions.jsNative``1">
<summary>
 Used to indicate that a member is only implemented in native Javascript
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsFunc">
<summary>
 Use it to cast dynamic functions coming from JS. If you know the argument
 and return types, use `System.Func&lt;&gt;` instead. If you need a constructor
 (must be applied with `new` keyword), use `JsConstructor`.

 ## Sample
     let f: JsFunc = import &quot;myFunction&quot; &quot;./myLib&quot;
     f.Invoke(5, &quot;bar&quot;)
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor`7">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor`6">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor`5">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor`4">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor`3">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor`2">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor`1">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="T:Fable.Core.JsInterop.JsConstructor">
<summary>
 Use it when importing a constructor from a JS library.
</summary>
</member>
<member name="M:Fable.Core.JsInterop.jsThis``1">
<summary>
 Compiles to JS `this` keyword.

 ## Sample
     jqueryMethod(fun x y -&gt; jsThis?add(x, y))
</summary>
</member>
<member name="M:Fable.Core.JsInterop.nameofLambda``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Reads the name of a property or a type from the lambda body
</summary>
</member>
<member name="M:Fable.Core.JsInterop.nameof``1(``0)">
<summary>
 Reads the name of an identifier, a property or a type
</summary>
</member>
<member name="M:Fable.Core.JsInterop.toPlainJsObj``1(``0)">
<summary>
 Used when you need to send an F# record to a JS library accepting only plain JS objects (POJOs)
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importDynamic``1(System.String)">
<summary>
 Imports a file dynamically at runtime
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importSideEffects(System.String)">
<summary>
 Imports a file only for its side effects
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importAll``1(System.String)">
<summary>
 F#: let myLib = importAll&lt;obj&gt; &quot;myLib&quot;
 JS: import * as myLib from &quot;myLib&quot;
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importDefault``1(System.String)">
<summary>
 F#: let defaultMember = importDefault&lt;unit-&gt;obj&gt; &quot;myModule&quot;
 JS: import defaultMember from &quot;myModule&quot;
</summary>
</member>
<member name="M:Fable.Core.JsInterop.importMember``1(System.String)">
<summary>
 F#: let myMember = importMember&lt;string&gt; &quot;myModule&quot;
 JS: import { myMember } from &quot;myModule&quot;
 Note the import must be immediately assigned to a value in a let binding
</summary>
</member>
<member name="M:Fable.Core.JsInterop.import``1(System.String,System.String)">
<summary>
 Works like `ImportAttribute` (same semantics as ES6 imports).
 You can use &quot;*&quot; or &quot;default&quot; selectors.
</summary>
</member>
<member name="M:Fable.Core.JsInterop.jsConstructor``1">
<summary>
 Get the JS function constructor for class types
</summary>
</member>
<member name="M:Fable.Core.JsInterop.createEmpty``1">
<summary>
 Create an empty JS object: {}
</summary>
</member>
<member name="M:Fable.Core.JsInterop.jsOptions``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Create a literal JS object from a mutator lambda. Normally used when
 the options interface has too many fields to be represented with a Pojo record.
 E.g. `jsOptions&lt;MyOpt&gt; (fun o -&gt; o.foo &lt;- 5)` in JS becomes `{ foo: 5 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.keyValueList``1(Fable.Core.CaseRules,System.Collections.Generic.IEnumerable{``0})">
<summary>
 Create a literal JS object from a collection of union constructors.
 E.g. `keyValueList CaseRules.LowerFirst [ MyUnion 4 ]` in JS becomes `{ myUnion: 4 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.createObj``1(``0)">
<summary>
 Create a literal JS object from a collection of key-value tuples.
 E.g. `createObj [ &quot;a&quot; ==&gt; 5 ]` in JS becomes `{ a: 5 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.createNew(System.Object,System.Object)">
<summary>
 Destructure and apply a tuple to an arbitrary value with `new` keyword.
 E.g. `createNew myCons (arg1, arg2)` in JS becomes `new myCons(arg1, arg2)`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_EqualsEqualsGreater(System.String,System.Object)">
<summary>
 Upcast the right operand to obj (and uncurry it if it&apos;s a function) and create a key-value tuple.
 Mostly convenient when used with `createObj`.
 E.g. `createObj [ &quot;a&quot; ==&gt; 5 ]` in JS becomes `{ a: 5 }`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_Dollar``1(System.Object,System.Object)">
<summary>
 Destructure and apply a tuple to an arbitrary value.
 E.g. `myFn $ (arg1, arg2)` in JS becomes `myFn(arg1, arg2)`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_DynamicAssignment(System.Object,System.Object,System.Object)">
<summary>
 Dynamically assign a value to a property of an arbitrary object.
 `myObj?propA &lt;- 5` in JS becomes `myObj.propA = 5`
 `myObj?(propA) &lt;- 5` in JS becomes `myObj[propA] = 5`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_Dynamic``1(System.Object,System.Object)">
<summary>
 Dynamically access a property of an arbitrary object.
 `myObj?propA` in JS becomes `myObj.propA`
 `myObj?(propA)` in JS becomes `myObj[propA]`
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_BangHat``2(``0)">
<summary>
 Implicit cast for erased unions (U2, U3...)
</summary>
</member>
<member name="M:Fable.Core.JsInterop.op_BangBang``2(``0)">
<summary>
 Has same effect as `unbox` (dynamic casting erased in compiled JS code).
 The casted type can be defined on the call site: `!!myObj?bar(5): float`
</summary>
</member>
</members>
</doc>
